// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  username       String     
  password       String?
  name           String?    @default("")
  profilePicture String?    @default("")
  provider       Provider
  sub            String     @default("")
  solWallet      SolWallet?
  products       Product[]
  cart           Cart?
  orders         Order[]
  createdAt      DateTime   @default(now())

  @@unique([username, provider])
}

enum Provider {
  Google
  Github
  Discord
}

model SolWallet {
  id         String @id @default(uuid())
  publicKey  String
  privateKey String
  balance BigInt  @default(0)
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String     @id @default(uuid())
  title       String
  description String
  price       BigInt
  imageUrl    String?
  category    String
  seller      User       @relation(fields: [sellerId], references: [id],onDelete: Cascade)
  sellerId    String
  sellerName  String?
  orderItems  OrderItem[]
  cartItems   CartItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int

  cart      Cart     @relation(fields: [cartId], references: [id],onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id],onDelete: Cascade)

  @@unique([cartId, productId])  
}



model Order {
  id         String     @id @default(uuid())
  user       User       @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId     String
  items      OrderItem[]
  totalPrice BigInt
  status     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id],onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id],onDelete:Cascade )
  productId String
  quantity  Int     @default(1)
}